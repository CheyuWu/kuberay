name: Dependabot Upgrade Monitor

on:
  pull_request:
    types: [opened]

jobs:
  monitor-dependabot:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for checks to complete
        uses: WyriHaximus/github-action-wait-for-status@v1.8.0
        with:
          ignoreActions: monitor-dependabot
          checkInterval: 60

      - name: Check if PR is failing
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const pull_number = context.issue.number;
            const maxRetries = 5;
            const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

            let mergeableState = "unknown";
            for (let i = 0; i < maxRetries; i++) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number,
              });

              mergeableState = pr.data.mergeable_state;
              console.log(`Attempt ${i + 1}: mergeable_state = ${mergeableState}`);

              if (mergeableState !== "unknown") break;
              await delay(2000); // Wait for 2 seconds before retrying
            }

            if (mergeableState !== "clean") {
              core.setFailed(`PR is not mergeable (state: ${mergeableState})`);
            }

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Dependabot upgrade failed: #${context.issue.number}`,
              body: `Dependabot PR #${context.issue.number} failed.\n\nLink: ${context.payload.pull_request.html_url}`,
              labels: ["dependencies", "enhancement", "go"],
            });

      - name: Assign maintainers on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Step 1: Get collaborators
            const collaborators = await github.paginate(
              github.rest.repos.listCollaborators,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                affiliation: 'direct',
                per_page: 100
              }
            );

            // Step 2: Filter maintainers
            const maintainers = collaborators
              .filter(user => user.permissions.admin)
              .map(user => user.login);

            // Step 3: Assign to the PR
            if (maintainers.length > 0) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                assignees: maintainers,
              });
            } else {
              console.log("No maintainers found to assign.");
            }
